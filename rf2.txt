
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(text2vec)
> library(data.table)
> library(magrittr)
> library(stopwords)
> library(SnowballC)
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
> library(glmnet)
Loading required package: Matrix
Loading required package: foreach
Loaded glmnet 2.0-16

> 
> setwd("/nas/longleaf/home/yutongl/BIOS735/run")
> sample       <- fread("sample_submission.csv")
> test         <- fread("test.csv")
> test_labels  <- fread("test_labels.csv")
> train.data   <- fread("train.csv")
> 
> # undersample nontoxic group
> toxic.id = which(train.data$toxic==1) # # of toxic = 15294
> nontoxic.id = which(train.data$toxic==0) # # of nontoxic = 144277
> set.seed(123)
> nontoxic.sampleId = sample(nontoxic.id,length(toxic.id))
> train.sample = train.data[c(toxic.id,nontoxic.sampleId),]
> 
> prep_fun = tolower
> #stemming words
> tok_fun = function(x) {
+   word_tokenizer(x) %>% lapply( function(x) SnowballC::wordStem(x,language="en"))
+ }
> 
> it_train = itoken(train.sample$comment_text,
+                   preprocessor = prep_fun,
+                   tokenizer = tok_fun,
+                   ids = train.sample$id,
+                   progressbar = TRUE)
> 
> 
> vocab = create_vocabulary(it_train, ngram=c(1L,3L), stopwords=stopwords("en",source="smart"))
  |                                                                              |=======                                                               |  10%  |                                                                              |==============                                                        |  20%  |                                                                              |=====================                                                 |  30%  |                                                                              |============================                                          |  40%  |                                                                              |===================================                                   |  50%  |                                                                              |==========================================                            |  60%  |                                                                              |=================================================                     |  70%  |                                                                              |========================================================              |  80%  |                                                                              |===============================================================       |  90%  |                                                                              |======================================================================| 100%
> 
> prune.vocab <- prune_vocabulary(vocab, term_count_min = 10)
> 
> vectorizer = vocab_vectorizer(prune.vocab)
> raw.dtm = create_dtm(it_train, vectorizer)
  |                                                                              |=======                                                               |  10%  |                                                                              |==============                                                        |  20%  |                                                                              |=====================                                                 |  30%  |                                                                              |============================                                          |  40%  |                                                                              |===================================                                   |  50%  |                                                                              |==========================================                            |  60%  |                                                                              |=================================================                     |  70%  |                                                                              |========================================================              |  80%  |                                                                              |===============================================================       |  90%  |                                                                              |======================================================================| 100%> dim(raw.dtm)
[1] 30588 13780
> 
> #bns = BNS$new()
> #train.dtm = bns$fit_transform(raw.dtm, train.data$toxic)
> train.dtm = raw.dtm
> set.seed(111)
> feature.selection = cv.glmnet(train.dtm, train.sample$toxic, family = "binomial",type.measure = "auc")
There were 11 warnings (use warnings() to see them)
> beta = coef(feature.selection,lambda = feature.selection$lambda.1se)
> 
> #colnames(train.dtm)[which(beta!=0)]
> 
> s.train <- train.dtm[,which(beta[-1]!=0)]
> 
> dense.train.dtm <- as.matrix(s.train)
> 
> library(tree)
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin

> 
> # Create model with default paramters
> control <- trainControl(method="cv", number=10, search="grid")
> metric <- "Accuracy"
> set.seed(1)
> p <- dim(dense.train.dtm)[2]
> tunegrid <- expand.grid(.mtry=c(2^(0:6)))
> 
> rf_gridsearch <- train(dense.train.dtm, as.factor(train.sample$toxic), 
+                        method="rf", metric=metric, tuneGrid=tunegrid, 
+                        trControl=control)
> 
> save(rf_gridsearch,file="./rf_gridsearch2.Rdata")
> 
> 
> proc.time()
     user    system   elapsed 
57366.470   129.889 58713.843 
